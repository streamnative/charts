#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ template "pulsar.fullname" . }}{{ template "pulsar.detector.component" . }}"
  namespace: {{ template "pulsar.namespace" . }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
    component: {{ .Values.pulsar_detector.component }}
spec:
  replicas: {{ .Values.pulsar_detector.replicaCount }}
  selector:
    matchLabels:
      {{- include "pulsar.matchLabels" . | nindent 6 }}
      component: {{ .Values.pulsar_detector.component }}
  template:
    metadata:
      labels:
        {{- include "pulsar.template.labels" . | nindent 8 }}
        component: {{ .Values.pulsar_detector.component }}
{{- if .Values.pulsar_detector.annotations }}  
      annotations:
{{ toYaml .Values.pulsar_detector.annotations | indent 8 }}
{{- end }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
      {{- end }}
    {{- if .Values.pulsar_detector.serviceAccount.use }}
      serviceAccountName: {{ template "pulsar.detector.serviceAccount" . }}
    {{- end }}
    {{- if .Values.pulsar_detector.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.pulsar_detector.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.pulsar_detector.tolerations }}
      tolerations:
{{ toYaml .Values.pulsar_detector.tolerations | indent 8 }}
    {{- end }}
      terminationGracePeriodSeconds: {{ .Values.pulsar_detector.gracePeriod }}
      {{- if not .Values.istio.enabled }}
      initContainers:
      # This init container will wait for zookeeper to be ready before
      # deploying the bookies
      - name: wait-zookeeper-ready
        image: "{{ .Values.images.pulsar_detector.repository }}:{{ .Values.images.pulsar_detector.tag }}"
        imagePullPolicy: {{ .Values.images.pulsar_detector.pullPolicy }}
        command: ["sh", "-c"]
        args:
          - >-
            until bin/pulsar zookeeper-shell -server {{ .Values.pulsar_detector.zookeeper.url }} get {{ .Values.pulsar_detector.metadataPrefix }}/admin/clusters/{{ template "pulsar.detector.clusterName" . }}; do
              sleep 3;
            done;
      # This init container will wait for at least one broker to be ready before
      # deploying the pulsar-detector
      - name: wait-broker-ready
        image: "{{ .Values.images.pulsar_detector.repository }}:{{ .Values.images.pulsar_detector.tag }}"
        imagePullPolicy: {{ .Values.images.pulsar_detector.pullPolicy }}
        command: ["sh", "-c"]
        args:
          - >-
            set -e;
            brokerServiceNumber="$(nslookup -timeout=10 {{ .Values.pulsar_detector.broker.service }} | grep Name | wc -l)";
            until [ ${brokerServiceNumber} -ge 1 ]; do
              echo "pulsar cluster {{ template "pulsar.fullname" . }} isn't initialized yet ... check in 10 seconds ...";
              sleep 10;
              brokerServiceNumber="$(nslookup -timeout=10 {{ .Values.pulsar_detector.broker.service }} | grep Name | wc -l)";
            done;
      {{- end }}
      containers:
      - name: "{{ template "pulsar.fullname" . }}"
        image: "{{ .Values.images.pulsar_detector.repository }}:{{ .Values.images.pulsar_detector.tag }}"
        imagePullPolicy: {{ .Values.images.pulsar_detector.pullPolicy }}
        command: ["sh", "-c"]
        args:
        - >
          bin/pulsar-detector -service-url {{ .Values.pulsar_detector.broker.serviceURL }} -webservice-url {{ .Values.pulsar_detector.broker.webserviceURL }} {{- if .Values.pulsar_detector.brokerAuthenticationEnabled }} -auth-plugin token -auth-params "{\"token\":\"$brokerClientAuthenticationParameters\"}" {{- end }} {{- if .Values.pulsar_detector.extraArgs }} {{.Values.pulsar_detector.extraArgs }} {{- end }};
        ports:
        # prometheus needs to access /metrics endpoint
        - name: server
          containerPort: {{ .Values.pulsar_detector.port }}
        env:
        {{- if .Values.pulsar_detector.vault.enabled }}
        - name: brokerClientAuthenticationParameters
          valueFrom:
              secretKeyRef:
                name: {{ template "pulsar.detector.broker-secret-key-name" . }}
                key: brokerClientAuthenticationParameters
        {{- end }}
