#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

{{- if .Values.components.vault }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.vault.component }}-init"
  namespace: {{ template "pulsar.namespace" . }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
    component: "{{ .Values.bookkeeper.component }}-init"
spec:
  template:
    spec:
      serviceAccountName: {{ template "pulsar.vault.serviceAccount" . }}
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      containers:
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.vault.component }}-init"
        image: "{{ .Values.images.vault_init.repository }}:{{ .Values.images.vault_init.tag }}"
        imagePullPolicy: {{ .Values.images.vault.pullPolicy }}
        command: ["sh", "-c"]
        args:
          - >
           tokenLen=$(kubectl get secret {{ template "pulsar.vault-unseal-secret-key-name" . }} -o jsonpath='{.data.vault-root}'|wc -m);
           until [ ${tokenLen} -gt 1 ]; do
             echo "current token is empty ! wait another 10s~"
             sleep 10;
             tokenLen=$(kubectl get secret {{ template "pulsar.vault-unseal-secret-key-name" . }} -o jsonpath='{.data.vault-root}'|wc -m);
           done;
           echo "vault root token is ready";
           rootToken=$(kubectl get secret {{ template "pulsar.vault-unseal-secret-key-name" . }} -o jsonpath='{.data.vault-root}'|base64 -d);
           echo $rootToken;
           echo $rootToken > /root/rootToken;
           export ROOT_TOKEN=$rootToken;
           vault login $ROOT_TOKEN;
           until [ $? -eq 0 ]; do
              echo "vault is not ready now, wait another 5s~";
              sleep 5;
              vault login $ROOT_TOKEN;
           done;
           echo "vault is ready~";

           cd /root/pulsar/create_pulsar_tokens && /usr/local/bin/zsh create_pulsar_tokens.sh -n {{ template "pulsar.namespace" . }} -k {{ .Release.Name }} -v {{ template "pulsar.vault.url" . }} -r $ROOT_TOKEN && cd /root/pulsar/init_vault_streamnative_console && /usr/local/bin/zsh startup.sh
        env:
        - name: NAMESPACE
          value: {{ template "pulsar.namespace" . }}
        - name: VAULT_SECRET_KEY_NAME
          value: {{ template "pulsar.vault-secret-key-name" . }}
        - name: CONSOLE_SECRET_KEY_NAME
          value: {{ template "pulsar.console-secret-key-name" . }}
        - name: TOOLSET_TOKEN_SECRET_NAME
          value: "{{ .Release.Name }}-token-{{ .Values.auth.superUsers.client }}"
        - name: VAULT_ADDR
          value: {{ template "pulsar.vault.url" . }}
        volumeMounts:
        {{- include "pulsar.vault.createPulsarTokens.volumeMounts" . | nindent 8 }}
        {{- include "pulsar.vault.initStreamNativeConsole.volumeMounts" . | nindent 8 }}
      volumes:
      {{- include "pulsar.vault.createPulsarTokens.volumes" . | nindent 6 }}
      {{- include "pulsar.vault.initStreamNativeConsole.volumes" . | nindent 6 }}
      restartPolicy: Never
{{- end }}
