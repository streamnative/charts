#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

{{- if .Values.initialize }}
{{- if .Values.components.streamnative_console }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.streamnative_console.component }}-init"
  namespace: {{ template "pulsar.namespace" . }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
    component: {{ .Values.streamnative_console.component }}
spec:
  template:
    spec:
      initContainers:
        # This init container will wait for broker to be ready before
        # deploying the pulsar manager init job
        - name: wait-broker-ready
          image: "{{ .Values.images.broker.repository }}:{{ .Values.images.broker.tag }}"
          imagePullPolicy: {{ .Values.images.broker.pullPolicy }}
          command: ["sh", "-c"]
          args:
            - >
              set -e; while [ "$(curl -s -o /dev/null -w '%{http_code}' {{ template "pulsar.proxy.web.service.url" . }}/status.html)" -ne "200" ]; do echo "pulsar cluster isn't initialized yet..."; sleep 5; done;
              echo "broker cluster is ready";
      containers:
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.streamnative_console.component }}-init"
        image: "{{ .Values.images.streamnative_console.repository }}:{{ .Values.images.streamnative_console.tag }}"
        imagePullPolicy: {{ .Values.images.streamnative_console.pullPolicy }}
        env:
        - name: SPRING_CONFIGURATION_FILE
          value: /pulsar-manager/pulsar-manager/application.properties
        - name: DEFAULT_ORGANIZATION
          value: {{ .Values.streamnative_console.configData.DEFAULT_ORGANIZATION }}
        - name: INSTANCE_NAME
          value: {{ .Values.streamnative_console.configData.INSTANCE_NAME }}
        - name: WEB_SERVICE_URL
          value: {{ template "pulsar.web.service.url" . }}
        {{- if .Values.broker.kop.enabled }}
        - name: KOP_SERVICE_URL
          value: {{ template "pulsar.broker.kop.service.url" .}}
        {{- end }}
        - name: STREAMNATIVE_CONSOLE_BACKEND_URL
          value: http://{{ template "pulsar.streamnative_console.service" . }}:7750
        envFrom:
        - secretRef:
            name: {{ template "pulsar.vault-secret-key-name" . }}
        volumeMounts:
        - name: "{{ template "pulsar.fullname" . }}-{{ .Values.streamnative_console.component }}-init-instance"
          mountPath: "/root/init_instance/"
        command: ["sh", "-c"]
        args:
          - >
            python3 /root/init_instance/init_instance.py 2>/dev/null;
            until [ $? -eq 0 ]; do
              echo "streamnative console is not ready now! wait another 10s~";
              sleep 10;
              python3 /root/init_instance/init_instance.py 2>/dev/null;
            done;
            echo "StreamNative Console is ready to use~";
      restartPolicy: Never
      volumes:
        - name: "{{ template "pulsar.fullname" . }}-{{ .Values.streamnative_console.component }}-init-instance"
          configMap:
            name: "{{ template "pulsar.fullname" . }}-{{ .Values.streamnative_console.component }}-init-instance"
{{- end }}
{{- end }}
