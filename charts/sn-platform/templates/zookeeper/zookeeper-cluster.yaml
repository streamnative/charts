#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#
# deploy zookeeper only when `components.zookeeper` is true
{{- if and .Values.components.zookeeper .Values.zookeeper.operator.enabled }}
apiVersion: zookeeper.streamnative.io/v1alpha1
kind: ZooKeeperCluster
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}"
  namespace: {{ template "pulsar.namespace" . }}
  annotations:
    "cloud.streamnative.io/ignore-leader-check": "true"
    "cloud.streamnative.io/cluster-force-update": "true"
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
    component: {{ .Values.zookeeper.component }}
{{- with .Values.zookeeper.labels }}
{{ toYaml . | indent 4 }}
{{- end }}
spec:
  replicas: {{ .Values.zookeeper.replicaCount }}
  image: "{{ .Values.images.zookeeper.repository }}:{{ .Values.images.zookeeper.tag }}"
  pod:
    labels:
      {{- include "pulsar.template.labels" . | nindent 6 }}
      component: {{ .Values.zookeeper.component }}
{{- with .Values.zookeeper.labels }}
{{ toYaml . | indent 6 }}
{{- end }}
    annotations:
      {{- if .Values.monitoring.datadog }}
      {{- include "pulsar.zookeeper.datadog.annotation" . | nindent 6 }}
      {{- end }}
{{- with .Values.zookeeper.annotations }}
{{ toYaml . | indent 6 }}
{{- end }}
    {{- if .Values.zookeeper.customTools.restore.enable }}
    initContainers:
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-{{ .Values.zookeeper.customTools.restore.component }}"
        image: "{{ .Values.images.zookeeper.customTools.restore.repository }}:{{ .Values.images.zookeeper.customTools.restore.tag }}"
        imagePullPolicy: {{ .Values.zookeeper.customTools.restore.pullPolicy }}
        command: ["sh", "-c"]
        args:
          - >
            cat conf/pulsar-metadata-tool/pulsar-metadata-tool.properties;
            bin/pulsar-metadata-tool restore {{ .Values.zookeeper.customTools.restore.restorePoint }};
            ls -R /pulsar/data/zookeeper;
        env:
          {{- if .Values.zookeeper.customTools.restore.secrets.use }}
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: {{ .Values.zookeeper.customTools.restore.secrets.aws.secretName }}
                key: AWS_ACCESS_KEY_ID
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: {{ .Values.zookeeper.customTools.restore.secrets.aws.secretName }}
                key: AWS_SECRET_ACCESS_KEY
          {{- end }}
          - name: METADATA_TOOL_CONF
            value: "/pulsar-metadata-tool/conf/pulsar-metadata-tool/pulsar-metadata-tool.properties"
        volumeMounts:
          - name: "data"
            mountPath: "/pulsar/data"
          - name: restore-config
            mountPath: /pulsar-metadata-tool/conf/pulsar-metadata-tool
    volumes:
      - name: restore-config
        configMap:
          name: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.customTools.restore.component }}"
    {{- end }}
    affinity:
      {{- if and .Values.affinity.anti_affinity .Values.zookeeper.affinity.anti_affinity }}
      podAntiAffinity:
        {{ .Values.zookeeper.affinity.type }}:
          {{ if eq .Values.zookeeper.affinity.type "requiredDuringSchedulingIgnoredDuringExecution" }}
          - labelSelector:
              matchExpressions:
                - key: "app"
                  operator: In
                  values:
                    - "{{ template "pulsar.name" . }}"
                - key: "release"
                  operator: In
                  values:
                    - {{ .Release.Name }}
                - key: "component"
                  operator: In
                  values:
                    - {{ .Values.zookeeper.component }}
            topologyKey: "kubernetes.io/hostname"
          {{ else }}
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                      - "{{ template "pulsar.name" . }}"
                  - key: "release"
                    operator: In
                    values:
                      - {{ .Release.Name }}
                  - key: "component"
                    operator: In
                    values:
                      - {{ .Values.zookeeper.component }}
              topologyKey: "kubernetes.io/hostname"
          {{ end }}
        {{- end }}
    {{- if .Values.zookeeper.resources }}
    resources:
{{ toYaml .Values.zookeeper.resources | indent 6 }}
    {{- end }}
    {{- if .Values.zookeeper.securityContext }}
    securityContext: {{ .Values.zookeeper.securityContext }}
    {{- end }}
    {{- if .Values.zookeeper.tolerations }}
    tolerations:
{{ toYaml .Values.zookeeper.tolerations | indent 6 }}
    {{- end }}
    terminationGracePeriodSeconds: {{ .Values.zookeeper.gracePeriod }}
    jvmOptions:
      memoryOptions:
        - {{ .Values.zookeeper.configData.PULSAR_MEM }}
      gcOptions:
        - {{ .Values.zookeeper.configData.PULSAR_GC }}
  {{- if and .Values.volumes.persistence .Values.zookeeper.volumes.persistence }}
  persistence:
    data:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: {{ .Values.zookeeper.volumes.data.size }}
    {{- if and .Values.volumes.local_storage .Values.zookeeper.volumes.data.local_storage }}
      storageClassName: "local-storage"
    {{- else }}
      {{- if  .Values.zookeeper.volumes.data.storageClass }}
      storageClassName: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-{{ .Values.zookeeper.volumes.data.name }}"
      {{- else if .Values.zookeeper.volumes.data.storageClassName }}
      storageClassName: {{ .Values.zookeeper.volumes.data.storageClassName }}
      {{- end -}}
    {{- end }}
    dataLog:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          {{- if .Values.zookeeper.volumes.useSeparateDiskForTxlog }}
          storage: {{ .Values.zookeeper.volumes.dataLog.size }}
          {{- else }}
          storage: "0"
          {{- end }}
    {{- if and .Values.volumes.local_storage .Values.zookeeper.volumes.data.local_storage }}
      storageClassName: "local-storage"
    {{- else }}
      {{- if  .Values.zookeeper.volumes.data.storageClass }}
      storageClassName: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-{{ .Values.zookeeper.volumes.data.name }}"
      {{- else if .Values.zookeeper.volumes.data.storageClassName }}
      storageClassName: {{ .Values.zookeeper.volumes.data.storageClassName }}
      {{- end -}}
    {{- end }}
    reclaimPolicy: Delete
  {{- end }}
  config:
    serverCnxnFactory: {{ .Values.zookeeper.serverCnxnFactory }}
    # copy from configmap
    custom:
      {{- if .Values.zookeeper.operator.adopt_existing }}
      # if adopting existing zk cluster then also keep existing data/data-log dir setting
      PULSAR_PREFIX_dataDir: /pulsar/data/zookeeper
      {{- if .Values.zookeeper.volumes.useSeparateDiskForTxlog }}
      # use a separate disk for tx log
      PULSAR_PREFIX_dataLogDir: /pulsar/data/zookeeper-datalog
      {{- end }}
      {{- end }}
      # enable zookeeper tls
      {{- if and .Values.tls.enabled .Values.tls.zookeeper.enabled }}
      secureClientPort: "{{ .Values.zookeeper.ports.clientTls }}"
      PULSAR_PREFIX_secureClientPort: "{{ .Values.zookeeper.ports.clientTls }}"
      {{- end }}
      {{- if .Values.zookeeper.reconfig.enabled }}
      PULSAR_PREFIX_reconfigEnabled: "true"
      PULSAR_PREFIX_quorumListenOnAllIPs: "true"
      {{- end }}
      PULSAR_PREFIX_peerType: {{ .Values.zookeeper.peerType }}
{{ toYaml .Values.zookeeper.configData | indent 6 }}
      # Include log configuration file, If you want to configure the log level and other configuration
      # items, you can modify the configmap, and eventually it will overwrite the log4j2.yaml file under conf
{{ (.Files.Glob "conf/zookeeper/log4j2.yaml").AsConfig | indent 6 }}
  apiObjects:
    clientService: {}
    headlessService:
      metadata:
        name: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}"
    statefulSet:
      metadata:
        name: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}"
      updatePolicy:
      {{- if .Values.zookeeper.operator.adopt_existing }}
      {{ .Values.zookeeper.operator.updatePolicy }}
      {{- else }}
        - all
      {{- end }}
    configMap:
      metadata:
        name: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}"
    pdb:
      metadata:
        name: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}"
{{- end }}
