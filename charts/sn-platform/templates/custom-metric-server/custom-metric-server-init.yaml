#
# Copyright (c) 2019 - 2024 StreamNative, Inc.. All Rights Reserved.
#

{{- if and .Values.components.custom_metric_server .Values.custom_metric_server.enabled }}
kind: ServiceAccount
apiVersion: v1
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.custom_metric_server.component }}-init-serviceaccount"
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.custom_metric_server.component }}-init-role"
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["*"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.custom_metric_server.component }}-init-rolebinding"
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
roleRef:
  kind: Role
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.custom_metric_server.component }}-init-role"
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: "{{ template "pulsar.fullname" . }}-{{ .Values.custom_metric_server.component }}-init-serviceaccount"
    namespace: {{ .Values.namespace }}
---
# the script can be found here: https://github.com/prometheus-operator/prometheus-operator/blob/release-0.25/contrib/kube-prometheus/experimental/custom-metrics-api/gencerts.sh
# updated to take custom secret name and namespace
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.custom_metric_server.component }}-init-configmap"
  namespace: {{ .Values.namespace }}
  labels:
   {{- include "pulsar.standardLabels" . | nindent 4 }}
data:
  gencert.sh: |
    #!/usr/bin/env bash

    # Detect if we are on mac or should use GNU base64 options
    case `uname` in
            Darwin)
                b64_opts='-b=0'
                ;;
            *)
                b64_opts='--wrap=0'
    esac

    go get -v -u github.com/cloudflare/cfssl/cmd/...

    export PURPOSE=metrics
    openssl req -x509 -sha256 -new -nodes -days 365 -newkey rsa:2048 -keyout ${PURPOSE}-ca.key -out ${PURPOSE}-ca.crt -subj "/CN=ca"
    echo '{"signing":{"default":{"expiry":"87600h","usages":["signing","key encipherment","'${PURPOSE}'"]}}}' > "${PURPOSE}-ca-config.json"

    export SERVICE_NAME=custom-metrics-apiserver
    export ALT_NAMES='"custom-metrics-apiserver.monitoring","custom-metrics-apiserver.monitoring.svc"'
    echo '{"CN":"'${SERVICE_NAME}'","hosts":['${ALT_NAMES}'],"key":{"algo":"rsa","size":2048}}' | cfssl gencert -ca=metrics-ca.crt -ca-key=metrics-ca.key -config=metrics-ca-config.json - | cfssljson -bare apiserver

    cat <<-EOF > cm-adapter-serving-certs.yaml
    apiVersion: v1
    kind: Secret
    metadata:
      name: ${CERT_NAME}
      namespace: ${CERT_NAMESPACE}
    data:
      serving.crt: $(cat apiserver.pem | base64 ${b64_opts})
      serving.key: $(cat apiserver-key.pem | base64 ${b64_opts})
    EOF
---
# The job basically execute above script to generate a cert for kube-aggregator to communicate with metric server.
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.custom_metric_server.component }}-init-job"
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
spec:
  template:
    spec:
      serviceAccountName: "{{ template "pulsar.fullname" . }}-{{ .Values.custom_metric_server.component }}-init-serviceaccount"
      containers:
        - name: "cert-init"
          image: "golang"
          imagePullPolicy: IfNotPresent
          command: ["sh", "-c"]
          args:
            - >
              apt update;
              curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl";
              install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl;
              go get github.com/cloudflare/cfssl/cmd/cfssl
              go get github.com/cloudflare/cfssl/cmd/cfssljson
              apt install -y libssl-dev;
              /bin/bash /script/gencert.sh;
              kubectl apply -f cm-adapter-serving-certs.yaml;
          env:
            - name: CERT_NAME
              value: {{ .Values.custom_metric_server.cert_secret_name }}
            - name: CERT_NAMESPACE
              value: {{ .Values.namespace }}
          volumeMounts:
            - mountPath: /script
              name: script
      volumes:
        - name: script
          configMap:
            name: "{{ template "pulsar.fullname" . }}-{{ .Values.custom_metric_server.component }}-init-configmap"
      restartPolicy: Never
  {{- end }}
