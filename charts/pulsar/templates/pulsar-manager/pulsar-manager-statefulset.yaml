#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

{{- if .Values.components.pulsar_manager }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.pulsar_manager.component }}"
  namespace: {{ template "pulsar.namespace" . }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
    component: {{ .Values.pulsar_manager.component }}
spec:
  serviceName: "{{ template "pulsar.fullname" . }}-{{ .Values.pulsar_manager.component }}"
  replicas: 1
  selector:
    matchLabels:
      {{- include "pulsar.matchLabels" . | nindent 6 }}
      component: {{ .Values.pulsar_manager.component }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        {{- include "pulsar.template.labels" . | nindent 8 }}
        component: {{ .Values.pulsar_manager.component }}
      annotations:
{{- with .Values.pulsar_manager.annotations }}
{{ toYaml . | indent 8 }}
{{- end }}
        checksum/config: {{ include (print $.Template.BasePath "/pulsar-manager/pulsar-manager-configmap.yaml") . | sha256sum }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      {{- if .Values.pulsar_manager.imagePullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.pulsar_manager.imagePullSecrets }}
      {{- end }}
    {{- if .Values.pulsar_manager.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.pulsar_manager.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.pulsar_manager.tolerations }}
      tolerations:
{{ toYaml .Values.pulsar_manager.tolerations | indent 8 }}
    {{- end }}
      terminationGracePeriodSeconds: {{ .Values.pulsar_manager.gracePeriod }}
      initContainers:
      # This init container will wait for broker to be ready before
      # deploying the pulsar manager
      - name: wait-broker-ready
        image: "{{ .Values.images.broker.repository }}:{{ .Values.images.broker.tag }}"
        imagePullPolicy: {{ .Values.images.broker.pullPolicy }}
        command: ["sh", "-c"]
        args:
          - >
            brokerServiceNumber="$(nslookup -timeout=10 {{ template "pulsar.fullname" . }}-{{ .Values.broker.component }} | grep Name | wc -l)";
            until [ ${brokerServiceNumber} -ge 1 ]; do
              echo "broker cluster {{ template "pulsar.fullname" . }} isn't ready yet ... check in 10 seconds ...";
              sleep 10;
              brokerServiceNumber="$(nslookup -timeout=10 {{ template "pulsar.fullname" . }}-{{ .Values.broker.component }} | grep Name | wc -l)";
            done;
            echo "broker cluster is ready";
      containers:
        - name: "{{ template "pulsar.fullname" . }}-{{ .Values.pulsar_manager.component }}"
          image: "{{ .Values.images.pulsar_manager.repository }}:{{ .Values.images.pulsar_manager.tag }}"
          imagePullPolicy: {{ .Values.images.pulsar_manager.pullPolicy }}
          {{- if .Values.pulsar_manager.resources }}
          resources:
{{ toYaml .Values.pulsar_manager.resources | indent 12 }}
          {{- end }}
          {{- if .Values.pulsar_manager.probe.readiness.enabled }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.pulsar_manager.ports.backend }}
            initialDelaySeconds: {{ .Values.pulsar_manager.probe.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.pulsar_manager.probe.readiness.periodSeconds }}
            failureThreshold: {{ .Values.pulsar_manager.probe.readiness.failureThreshold }}
          {{- end }}
          {{- if .Values.pulsar_manager.probe.liveness.enabled }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.pulsar_manager.ports.backend }}
            initialDelaySeconds: {{ .Values.pulsar_manager.probe.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.pulsar_manager.probe.liveness.periodSeconds }}
            failureThreshold: {{ .Values.pulsar_manager.probe.liveness.failureThreshold }}
          {{- end }}
          {{- if .Values.pulsar_manager.probe.startup.enabled }}
          startupProbe:
            tcpSocket:
              port: {{ .Values.pulsar_manager.ports.backend }}
            initialDelaySeconds: {{ .Values.pulsar_manager.probe.startup.initialDelaySeconds }}
            periodSeconds: {{ .Values.pulsar_manager.probe.startup.periodSeconds }}
            failureThreshold: {{ .Values.pulsar_manager.probe.startup.failureThreshold }}
          {{- end }}
          command: ["sh", "-c"]
          args:
            - >
              /pulsar-manager/pulsar-manager.sh
          ports:
          - name: frontend
            containerPort: {{ .Values.pulsar_manager.ports.frontend }}
          - name: backend
            containerPort: {{ .Values.pulsar_manager.ports.backend }}
          volumeMounts:
          - name: pulsar-manager-data
            mountPath: /data
          - name: pulsar-manager-script
            mountPath: "/pulsar-manager/pulsar-manager.sh"
            subPath: entrypoint.sh
          - name: pulsar-manager-backend-script
            mountPath: "/pulsar-manager/pulsar-backend-entrypoint.sh"
            subPath: backend_entrypoint.sh
          {{- include "pulsar.pulsar_manager.token.volumeMounts" . | nindent 10 }}
          {{- include "pulsar.pulsar_manager.certs.volumeMounts" . | nindent 10 }}
      volumes:
      {{- if not (and .Values.volumes.persistence .Values.pulsar_manager.volumes.persistence) }}
      - name: pulsar-manager-data
        emptyDir: {}
      {{- end }}
      {{- if and .Values.volumes.persistence .Values.pulsar_manager.volumes.persistence }}
      {{- if or (not (or .Values.pulsar_manager.volumes.data.storageClass .Values.pulsar_manager.volumes.data.storageClassName)) .Values.pulsar_manager.volumes.data.useVolumeClaimTemplates }}
      - name: pulsar-manager-data
        persistentVolumeClaim:
          claimName: "{{ template "pulsar.pulsar_manager.data.pvc.name" . }}"
      {{- end }}
      {{- end }}
      - name: pulsar-manager-script
        configMap:
          name: "{{ template "pulsar.fullname" . }}-{{ .Values.pulsar_manager.component }}-configmap"
          defaultMode: 0755
      - name: pulsar-manager-backend-script
        configMap:
          name: "{{ template "pulsar.fullname" . }}-{{ .Values.pulsar_manager.component }}-configmap"
          defaultMode: 0755
      {{- include "pulsar.pulsar_manager.token.volumes" . | nindent 6 }}
      {{- include "pulsar.pulsar_manager.certs.volumes" . | nindent 6 }}
  {{- if and (or .Values.pulsar_manager.volumes.data.storageClass .Values.pulsar_manager.volumes.data.storageClassName) (not .Values.pulsar_manager.volumes.data.useVolumeClaimTemplates) }}
  volumeClaimTemplates:
  - metadata:
      name: pulsar-manager-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.pulsar_manager.volumes.data.size }}
      {{- include "pulsar.pulsar_manager.data.storage.class" . | nindent 6 }}
  {{- end }}
{{- end }}
