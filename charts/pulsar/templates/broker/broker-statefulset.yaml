#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

{{- if .Values.components.broker }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}"
  namespace: {{ template "pulsar.namespace" . }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
    component: {{ .Values.broker.component }}
spec:
  serviceName: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}"
  replicas: {{ .Values.broker.replicaCount }}
  selector:
    matchLabels:
      {{- include "pulsar.matchLabels" . | nindent 6 }}
      component: {{ .Values.broker.component }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        {{- include "pulsar.template.labels" . | nindent 8 }}
        component: {{ .Values.broker.component }}
      annotations:
        {{- if .Values.monitoring.datadog }}
        {{- include "pulsar.broker.datadog.annotation" . | nindent 8 }}
        {{- end }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.broker.ports.http }}"
        {{- if .Values.broker.autoRollDeployment }}
        checksum/config: {{ include (print $.Template.BasePath "/broker/broker-configmap.yaml") . | sha256sum }}
        {{- end }}
{{- with .Values.broker.annotations }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      {{- if .Values.broker.imagePullSecrets }}
      imagePullSecrets:
      - name: {{ .Values.broker.imagePullSecrets }}
      {{- end }}
      securityContext:
{{- with .Values.broker.securityContext }}
{{ toYaml . | indent 8 }}
{{- end }}
    {{- if or .Values.broker.serviceAccount.use (and .Values.components.functions  (not .Values.functions.useDedicatedRunner)) }}
      serviceAccountName: {{ template "pulsar.broker.serviceAccount" . }}
    {{- end }}
    {{- if .Values.broker.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.broker.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.broker.tolerations }}
      tolerations:
{{ toYaml .Values.broker.tolerations | indent 8 }}
    {{- end }}
    {{- if and .Values.affinity.anti_affinity .Values.broker.custom_affinity}}
      affinity:
{{ toYaml .Values.broker.custom_affinity | indent 8 }}
    {{ else }}  
      affinity:
        {{- if and .Values.affinity.anti_affinity .Values.broker.affinity.anti_affinity}}
        podAntiAffinity:
          {{ .Values.broker.affinity.type }}:
          {{ if eq .Values.broker.affinity.type "requiredDuringSchedulingIgnoredDuringExecution"}}
          - labelSelector:
              matchExpressions:
              - key: "app"
                operator: In
                values:
                - "{{ template "pulsar.name" . }}"
              - key: "release"
                operator: In
                values:
                - {{ .Release.Name }}
              - key: "component"
                operator: In
                values:
                - {{ .Values.broker.component }}
            topologyKey: "kubernetes.io/hostname"
          {{ else }}
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: "app"
                      operator: In
                      values:
                      - "{{ template "pulsar.name" . }}"
                    - key: "release"
                      operator: In
                      values:
                      - {{ .Release.Name }}
                    - key: "component"
                      operator: In
                      values:
                      - {{ .Values.broker.component }}
                topologyKey: "kubernetes.io/hostname"
          {{ end }}
        {{- end }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.broker.gracePeriod }}
      initContainers:
      # This init container will wait for zookeeper to be ready before
      # deploying the bookies
      - name: wait-zookeeper-ready
        image: "{{ .Values.images.broker.repository }}:{{ .Values.images.broker.tag }}"
        imagePullPolicy: {{ .Values.images.broker.pullPolicy }}
        command: ["sh", "-c"]
        args:
          {{ if .Values.broker.zkInitCommandOverride }}
          {{ with .Values.broker.zkInitCommandOverride }}
          -{{- toYaml . | indent 10 }}
          {{- end }}
          {{ else }}
          - >-
            {{ if .Values.broker.skipZookeeperReady }}
            echo "Skipping zookeeper ready check"
            {{ else }}
            {{- if .Values.broker.advertisedPodIP }}
            export BROKER_ADDRESS="${advertisedAddress}"
            {{- else }}
            export BROKER_ADDRESS="${HOSTNAME}.{{ template "pulsar.broker.service" . }}.{{ template "pulsar.namespace" . }}.svc.cluster.local"
            {{- end }}
            {{- include "pulsar.broker.zookeeper.tls.settings" . | nindent 12 }}
            {{- if .Values.pulsar_metadata.configurationStore }}
            until bin/bookkeeper org.apache.zookeeper.ZooKeeperMain -server {{ .Values.pulsar_metadata.configurationStore}} get {{ .Values.configurationStoreMetadataPrefix }}/admin/clusters/"{{ template "pulsar.cluster" . }}"; do
            {{- end }}
            {{- if not .Values.pulsar_metadata.configurationStore }}
            until bin/bookkeeper org.apache.zookeeper.ZooKeeperMain -server {{ template "pulsar.zookeeper.connect" . }} get {{ .Values.metadataPrefix }}/admin/clusters/{{ template "pulsar.cluster" . }}; do
            {{- end }}
              echo "pulsar cluster {{ template "pulsar.fullname" . }} isn't initialized yet ... check in 3 seconds ..." && sleep 3;
            done;
            {{ end }}
            {{ end }}
        volumeMounts:
        {{- include "pulsar.broker.certs.volumeMounts" . | nindent 8 }}
      # This init container will wait for bookkeeper to be ready before
      # deploying the broker
      - name: wait-bookkeeper-ready
        image: "{{ .Values.images.broker.repository }}:{{ .Values.images.broker.tag }}"
        imagePullPolicy: {{ .Values.images.broker.pullPolicy }}
        command: ["sh", "-c"]
        args:
          {{ if .Values.broker.bkInitCommandOverride }}
          {{ with .Values.broker.bkInitCommandOverride }}
          -{{- toYaml . | indent 10 }}
          {{- end }}
          {{ else }}
          - >

            {{- if .Values.broker.advertisedPodIP }}
            export BROKER_ADDRESS="${advertisedAddress}"
            {{- else }}
            export BROKER_ADDRESS="${HOSTNAME}.{{ template "pulsar.broker.service" . }}.{{ template "pulsar.namespace" . }}.svc.cluster.local"
            {{- end }}
            {{- include "pulsar.broker.zookeeper.tls.settings" . | nindent 12 }}
            bin/apply-config-from-env.py conf/bookkeeper.conf;
            until bin/bookkeeper shell whatisinstanceid; do
              echo "bookkeeper cluster is not initialized yet. backoff for 3 seconds ...";
              sleep 3;
            done;
            echo "bookkeeper cluster is already initialized";
            bookieServiceNumber="$(nslookup -timeout=10 {{ template "pulsar.fullname" . }}-{{ .Values.bookkeeper.component }} | grep Name | wc -l)";
            until [ ${bookieServiceNumber} -ge {{ .Values.broker.configData.managedLedgerDefaultEnsembleSize }} ]; do
              echo "bookkeeper cluster {{ template "pulsar.fullname" . }} isn't ready yet ... check in 10 seconds ...";
              sleep 10;
              bookieServiceNumber="$(nslookup -timeout=10 {{ template "pulsar.fullname" . }}-{{ .Values.bookkeeper.component }} | grep Name | wc -l)";
            done;
            echo "bookkeeper cluster is ready";
          {{ end }}
        envFrom:
          - configMapRef:
              name: "{{ template "pulsar.fullname" . }}-{{ .Values.bookkeeper.component }}"
        volumeMounts:
        {{- include "pulsar.broker.certs.volumeMounts" . | nindent 10 }}
{{- with .Values.common.extraInitContainers }}
{{ toYaml . | indent 6 }}
{{- end }}
{{- with .Values.broker.extraInitContainers }}
{{ toYaml . | indent 6 }}
{{- end }}
      containers:
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}"
        image: "{{ .Values.images.broker.repository }}:{{ .Values.images.broker.tag }}"
        imagePullPolicy: {{ .Values.images.broker.pullPolicy }}
        {{- if .Values.broker.probe.liveness.enabled }}
        livenessProbe:
          httpGet:
            path: /status.html
            port: {{ .Values.broker.ports.http }}
          initialDelaySeconds: {{ .Values.broker.probe.liveness.initialDelaySeconds }}
          periodSeconds: {{ .Values.broker.probe.liveness.periodSeconds }}
          failureThreshold: {{ .Values.broker.probe.liveness.failureThreshold }}
        {{- end }}
        {{- if .Values.broker.probe.readiness.enabled }}
        readinessProbe:
          httpGet:
            path: /status.html
            port: {{ .Values.broker.ports.http }}
          initialDelaySeconds: {{ .Values.broker.probe.readiness.initialDelaySeconds }}
          periodSeconds: {{ .Values.broker.probe.readiness.periodSeconds }}
          failureThreshold: {{ .Values.broker.probe.readiness.failureThreshold }}
        {{- end }}
        {{- if .Values.broker.probe.startup.enabled }}
        startupProbe:
          httpGet:
            path: /status.html
            port: {{ .Values.broker.ports.http }}
          initialDelaySeconds: {{ .Values.broker.probe.startup.initialDelaySeconds }}
          periodSeconds: {{ .Values.broker.probe.startup.periodSeconds }}
          failureThreshold: {{ .Values.broker.probe.startup.failureThreshold }}
        {{- end }}
      {{- if .Values.broker.resources }}
        resources:
{{ toYaml .Values.broker.resources | indent 10 }}
      {{- end }}
        command: ["sh", "-c"]
        args:
        # NOTE: We need to set `BROKER_ADDRESS` at the beginning. Because
        # other scripts will use this variable.
        {{ if .Values.broker.brokerCommandOverride }}
        {{ with .Values.broker.brokerCommandOverride }}
        -{{- toYaml . | indent 10 }}
        {{- end }}
        {{ else }}
        - >

        {{- if .Values.broker.advertisedPodIP }}
          export BROKER_ADDRESS="${advertisedAddress}"
        {{- else }}
          export BROKER_ADDRESS="${HOSTNAME}.{{ template "pulsar.broker.service" . }}.{{ template "pulsar.namespace" . }}.svc.cluster.local"
        {{- end }}
          
          bin/apply-config-from-env.py conf/broker.conf;
          echo "OK" > status;
          {{- include "pulsar.broker.zookeeper.tls.settings" . | nindent 10 }}
          BROKER_ZNODE="{{ template "pulsar.broker.znode.prefix" . }}${BROKER_ADDRESS}:{{ .Values.broker.ports.http }}"
          bin/pulsar zookeeper-shell -server {{ template "pulsar.zookeeper.connect" . }} get ${BROKER_ZNODE};
          while [ $? -eq 0 ]; do
            echo "broker ${BROKER_ADDRESS} znode still exists ... check in 10 seconds ...";
            sleep 10;
            bin/pulsar zookeeper-shell -server {{ template "pulsar.zookeeper.connect" . }} get ${BROKER_ZNODE};
          done;
          bin/pulsar broker;
        {{ end }}
        ports:
        # prometheus needs to access /metrics endpoint
        - name: http
          containerPort: {{ .Values.broker.ports.http }}
        {{- if or (not .Values.tls.enabled) (not .Values.tls.broker.enabled) }}
        - name: pulsar
          containerPort: {{ .Values.broker.ports.pulsar }}
        {{- end }}
        {{- if and .Values.tls.enabled .Values.tls.broker.enabled }}
        - name: https
          containerPort: {{ .Values.broker.ports.https }}
        - name: pulsarssl
          containerPort: {{ .Values.broker.ports.pulsarssl }}
        {{- end }}
        {{- if .Values.components.kop }}
        {{- if and .Values.tls.enabled .Values.tls.kop.enabled }}
        - name: kafkassl
          containerPort: {{ .Values.kop.ports.ssl }}
        {{- else }}
        - name: kafkaplaintext
          containerPort: {{ .Values.kop.ports.plaintext }}
        {{- end }}
        {{- end }}
        {{- if .Values.components.mop }}
        - name: mqtt
          containerPort: {{ .Values.mop.ports.plaintext }}
        {{- if .Values.mop.tls_psk.enabled }}
        - name: mqtt-tls-psk
          containerPort: {{ .Values.mop.ports.tls_psk }}
        {{- end }}
        {{- end }}
        env:
        {{- if .Values.broker.advertisedPodIP }}
        - name: advertisedAddress
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        {{- end }}
        {{- if and .Values.broker.offload.s3.enabled .Values.broker.offload.s3.secret }}
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: {{ .Values.broker.offload.s3.secret }}
              key: AWS_ACCESS_KEY_ID
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: {{ .Values.broker.offload.s3.secret }}
              key: AWS_SECRET_ACCESS_KEY
        {{- end }}
        {{- if or .Values.components.mop .Values.components.kop .Values.broker.addPodName }}
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        {{- end }}
        {{- if .Values.components.mop }}
        - name: PULSAR_PREFIX_mqttListeners
          value: mqtt://$(POD_NAME).{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}:{{ .Values.mop.ports.plaintext }}
        {{- end }}
        {{- if and .Values.components.kop }}
        {{- if .Values.ingress.kop.enabled }}
        {{- if and .Values.tls.enabled .Values.tls.kop.enabled }}
        - name: PULSAR_PREFIX_kafkaAdvertisedListeners
          value: SSL://$(POD_NAME).{{ .Values.ingress.kop.external_domain }}:{{ .Values.kop.ports.ssl }}
        - name: PULSAR_PREFIX_kafkaListeners
          value: SSL://$(POD_NAME).{{ template "pulsar.broker.service.fqn" . }}:{{ .Values.kop.ports.ssl }}
        - name: PULSAR_PREFIX_kopSslKeystorePassword
          valueFrom:
            secretKeyRef:
              name: "{{ template "pulsar.fullname" . }}-{{ .Values.tls.proxy.cert_name }}-jks-passwd"
              key: password
        - name: PULSAR_PREFIX_kopSslKeyPassword
          valueFrom:
            secretKeyRef:
              name: "{{ template "pulsar.fullname" . }}-{{ .Values.tls.proxy.cert_name }}-jks-passwd"
              key: password
        - name: PULSAR_PREFIX_kopSslTruststorePassword
          valueFrom:
            secretKeyRef:
              name: "{{ template "pulsar.fullname" . }}-{{ .Values.tls.proxy.cert_name }}-jks-passwd"
              key: password
        {{- else }}
        - name: PULSAR_PREFIX_kafkaAdvertisedListeners
          value: PLAINTEXT://$(POD_NAME).{{ .Values.ingress.kop.external_domain }}:{{ .Values.kop.ports.plaintext }}
        - name: PULSAR_PREFIX_kafkaListeners
          value: PLAINTEXT://$(POD_NAME).{{ template "pulsar.broker.service.fqn" . }}:{{ .Values.kop.ports.plaintext }}
        {{- end }}
        {{- end }}
        {{- end }}
{{- with .Values.broker.extraEnv}}
{{ toYaml . | indent 8 }}
{{- end }}
        envFrom:
        - configMapRef:
            name: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}"
        volumeMounts:
          {{- include "pulsar.broker.token.volumeMounts" . | nindent 10 }}
          {{- include "pulsar.broker.log.volumeMounts" . | nindent 10 }}
          {{- include "pulsar.broker.certs.volumeMounts" . | nindent 10 }}
          {{- if and .Values.tls.enabled .Values.tls.kop.enabled }}
          {{- include "pulsar.kop.certs.volumeMounts" . | nindent 10 }}
          {{- end }}
          {{- include "pulsar.broker.runtime.volumeMounts" . | nindent 10 }}
          {{- include "pulsar.broker.offload.volumeMounts" . | nindent 10 }}
          {{- include "pulsar.function.worker.config.volumeMounts" . | nindent 10 }}
          {{- if .Values.broker.offload.filesystem.enabled }}
          {{- include "pulsar.broker.offload.filesystem.config.volumeMounts" . | nindent 10 }}
          {{- end }}
{{- with .Values.broker.extraVolumeMounts }}
{{ toYaml . | indent 10 }}
{{- end }}
      volumes:
      {{- include "pulsar.broker.token.volumes" . | nindent 6 }}
      {{- include "pulsar.broker.certs.volumes" . | nindent 6 }}
      {{- if and .Values.tls.enabled .Values.tls.kop.enabled }}
      {{- include "pulsar.kop.certs.volumes" . | nindent 6 }}
      {{- end }}
      {{- include "pulsar.broker.log.volumes" . | nindent 6 }}
      {{- include "pulsar.broker.runtime.volumes" . | nindent 6 }}
      {{- include "pulsar.broker.offload.volumes" . | nindent 6 }}
      {{- include "pulsar.function.worker.config.volumes" . | nindent 6 }}
      {{- if .Values.broker.offload.filesystem.enabled }}
      {{- include "pulsar.broker.offload.filesystem.config.volumes" . | nindent 6 }}
      {{- end }}
{{- with .Values.broker.extraVolumes }}
{{ toYaml . | indent 6 }}
{{- end }}
{{- end }}
