#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

{{- if and .Values.components.functions .Values.functions.useDedicateRunner }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.functions.component }}"
  namespace: {{ template "pulsar.namespace" . }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
    component: {{ .Values.functions.component }}
spec:
  serviceName: "{{ template "pulsar.fullname" . }}-{{ .Values.functions.component }}"
  replicas: {{ .Values.functions.replicaCount }}
  selector:
    matchLabels:
      {{- include "pulsar.matchLabels" . | nindent 6 }}
      component: {{ .Values.functions.component }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        {{- include "pulsar.template.labels" . | nindent 8 }}
        component: {{ .Values.functions.component }}
      annotations:
        {{- if .Values.monitoring.datadog }}
        {{- include "pulsar.broker.datadog.annotation" . | nindent 8 }}
        {{- end }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.functions.ports.http }}"
        {{- if .Values.functions.autoRollDeployment }}
        checksum/config: {{ include (print $.Template.BasePath "/broker/broker-configmap.yaml") . | sha256sum }}
    {{- end }}
    {{- with .Values.functions.annotations }}
    {{ toYaml . | indent 8 }}
    {{- end }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets }}
      {{- end }}
      securityContext:
      {{- with .Values.broker.securityContext }}
      {{ toYaml . | indent 8 }}
      {{- end }}
      {{- if or .Values.broker.serviceAccount.use (and .Values.components.functions  (not .Values.functions.useDedicateRunner)) }}
      serviceAccountName: {{ template "pulsar.function.serviceAccount" . }}
      {{- end }}
      {{- if .Values.functions.nodeSelector }}
      nodeSelector:
      {{ toYaml .Values.functions.nodeSelector | indent 8 }}
      {{- end }}
      {{- if .Values.functions.tolerations }}
      tolerations:
      {{ toYaml .Values.functions.tolerations | indent 8 }}
      {{- end }}
      affinity:
        {{- if and .Values.affinity.anti_affinity .Values.broker.affinity.anti_affinity}}
        podAntiAffinity:
          {{ .Values.functions.affinity.type }}:
          {{ if eq .Values.functions.affinity.type "requiredDuringSchedulingIgnoredDuringExecution"}}
          - labelSelector:
              matchExpressions:
                - key: "app"
                  operator: In
                  values:
                    - "{{ template "pulsar.name" . }}"
                - key: "release"
                  operator: In
                  values:
                    - {{ .Release.Name }}
                - key: "component"
                  operator: In
                  values:
                    - {{ .Values.functions.component }}
            topologyKey: "kubernetes.io/hostname"
              {{ else }}
              - weight: 100
                podAffinityTerm:
                  labelSelector:
                    matchExpressions:
                      - key: "app"
                        operator: In
                        values:
                          - "{{ template "pulsar.name" . }}"
                      - key: "release"
                        operator: In
                        values:
                          - {{ .Release.Name }}
                      - key: "component"
                        operator: In
                        values:
                          - {{ .Values.functions.component }}
                  topologyKey: "kubernetes.io/hostname"
        {{ end }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.broker.gracePeriod }}
      initContainers:
        # This init container will wait for zookeeper to be ready before
        # deploying the bookies
        - name: wait-zookeeper-ready
          image: "{{ .Values.images.functions.repository }}:{{ .Values.images.functions.tag }}"
          imagePullPolicy: {{ .Values.images.functions.pullPolicy }}
          command: ["sh", "-c"]
          args:
            - >-
              {{- if $zk:=.Values.pulsar_metadata.userProvidedZookeepers }}
              until bin/pulsar zookeeper-shell -server {{ $zk }} ls {{ or .Values.metadataPrefix "/" }}; do
                echo "user provided zookeepers {{ $zk }} are unreachable... check in 3 seconds ..." && sleep 3;
              done;
              {{ else }}
              until bin/pulsar zookeeper-shell -server {{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }} get {{ .Values.metadataPrefix }}/admin/clusters/{{ template "pulsar.cluster" . }}; do
                sleep 3;
              done;
        {{- end}}
        - name: wait-broker-ready
          image: "{{ .Values.images.functions.repository }}:{{ .Values.images.functions.tag }}"
          imagePullPolicy: {{ .Values.images.functions.pullPolicy }}
          command: ["sh", "-c"]
          args:
            - >-
              set -e;
              brokerServiceNumber="$(nslookup -timeout=10 {{ template "pulsar.fullname" . }}-{{ .Values.broker.component }} | grep Name | wc -l)";
              until [ ${brokerServiceNumber} -ge 1 ]; do
                echo "pulsar cluster {{ template "pulsar.fullname" . }} isn't initialized yet ... check in 10 seconds ...";
                sleep 10;
                brokerServiceNumber="$(nslookup -timeout=10 {{ template "pulsar.fullname" . }}-{{ .Values.broker.component }} | grep Name | wc -l)";
              done;
      {{- with .Values.common.extraInitContainers }}
      {{ toYaml . | indent 6 }}
      {{- end }}
      containers:
        - name: "{{ template "pulsar.fullname" . }}-{{ .Values.functions.component }}"
          image: "{{ .Values.images.functions.repository }}:{{ .Values.images.functions.tag }}"
          imagePullPolicy: {{ .Values.images.functions.pullPolicy }}
          {{- if .Values.functions.probe.liveness.enabled }}
          livenessProbe:
            httpGet:
              path: /initialized
              port: {{ .Values.functions.ports.http }}
            initialDelaySeconds: {{ .Values.functions.probe.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.functions.probe.liveness.periodSeconds }}
            failureThreshold: {{ .Values.functions.probe.liveness.failureThreshold }}
          {{- end }}
          {{- if .Values.functions.probe.readiness.enabled }}
          readinessProbe:
            httpGet:
              path: /initialized
              port: {{ .Values.functions.ports.http }}
            initialDelaySeconds: {{ .Values.functions.probe.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.functions.probe.readiness.periodSeconds }}
            failureThreshold: {{ .Values.functions.probe.readiness.failureThreshold }}
          {{- end }}
          {{- if .Values.functions.resources }}
          resources:
{{ toYaml .Values.functions.resources | indent 12 }}
          {{- end }}
          command: ["sh", "-c"]
          args:
            - >
              bin/pulsar functions-worker;
          ports:
            # prometheus needs to access /metrics endpoint
            - name: http
              containerPort: {{ .Values.functions.ports.http }}
            {{- if and .Values.tls.enabled .Values.tls.broker.enabled }}
            - name: https
              containerPort: {{ .Values.functions.ports.https }}
            {{- end }}
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          volumeMounts:
          {{- include "pulsar.function.worker.config.volumeMounts" . | nindent 10 }}
{{- with .Values.functions.extraVolumeMounts }}
{{ toYaml . | indent 10 }}
{{- end }}
      volumes:
      {{- include "pulsar.function.worker.config.volumes" . | nindent 6 }}
{{- with .Values.functions.extraVolumes }}
{{ toYaml . | indent 6 }}
{{- end }}
  {{- end }}
