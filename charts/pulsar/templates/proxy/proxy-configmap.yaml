#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

{{- if .Values.components.proxy }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.proxy.component }}"
  namespace: {{ template "pulsar.namespace" . }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
    component: {{ .Values.proxy.component }}
data:
  clusterName: {{ template "pulsar.cluster" . }}
  httpNumThreads: "8"
  statusFilePath: "{{ template "pulsar.home" . }}/status"
  # prometheus needs to access /metrics endpoint
  webServicePort: "{{ .Values.proxy.ports.http }}"
  {{- if or (or (not .Values.tls.enabled) (not .Values.tls.proxy.enabled)) .Values.ingress.proxy.plaintext.enabled }}
  servicePort: "{{ .Values.proxy.ports.pulsar }}"
  brokerServiceURL: {{ template "pulsar.proxy.broker.service.url" . }}
  brokerWebServiceURL: {{ template "pulsar.proxy.web.service.url" . }}
  {{- end }}
  {{- if and .Values.tls.enabled .Values.tls.proxy.enabled }}
  tlsEnabledInProxy: "true"
  servicePortTls: "{{ .Values.proxy.ports.pulsarssl }}"
  webServicePortTls: "{{ .Values.proxy.ports.https }}"
  tlsCertificateFilePath: "/pulsar/certs/proxy/tls.crt"
  tlsKeyFilePath: "/pulsar/certs/proxy/tls.key"
  {{- if .Values.tls.proxy.untrustedCa }}
  tlsTrustCertsFilePath: "/pulsar/certs/ca/ca.crt"
  {{- end }}
  {{- end }}
  {{- if and .Values.tls.enabled .Values.tls.broker.enabled }}
  # if broker enables TLS, configure proxy to talk to broker using TLS
  brokerServiceURLTLS: {{ template "pulsar.proxy.broker.service.url.tls" . }}
  brokerWebServiceURLTLS: {{ template "pulsar.proxy.web.service.url.tls" . }}
  tlsEnabledWithBroker: "true"
  tlsCertRefreshCheckDurationSec: "300"
  brokerClientTrustCertsFilePath: "/pulsar/certs/broker/ca.crt"
  {{- end }}

  # Authentication Settings
  {{- if .Values.auth.authentication.enabled }}
  authenticationEnabled: "true"
  # this configuration should be same with `authenticateOriginalAuthData` in broker.conf
  forwardAuthorizationCredentials: "true"
  {{- if .Values.auth.authorization.enabled }}
  # disable authorization on proxy and forward authorization credentials to broker
  authorizationEnabled: "false"
  superUserRoles: {{ .Values.auth.superUsers.broker }},{{ .Values.auth.superUsers.proxy }},{{ .Values.auth.superUsers.websocket }},{{ .Values.auth.superUsers.client }},{{ .Values.auth.superUsers.pulsar_manager }}
  {{- end }}
  {{- if and (eq .Values.auth.authentication.provider "jwt") (not .Values.auth.vault.enabled) }}
  # token authentication configuration
  authenticationProviders: "org.apache.pulsar.broker.authentication.AuthenticationProviderToken"
  brokerClientAuthenticationParameters: "file:///pulsar/tokens/proxy/token"
  brokerClientAuthenticationPlugin: "org.apache.pulsar.client.impl.auth.AuthenticationToken"
  {{- if .Values.auth.authentication.jwt.usingSecretKey }}
  tokenSecretKey: "file:///pulsar/keys/token/secret.key"
  {{- else }}
  tokenPublicKey: "file:///pulsar/keys/token/public.key"
  {{- end }}
  {{- end }}
  {{- if (eq .Values.auth.authentication.provider "oauth2") }}
  PULSAR_PREFIX_oauthIssuerUrl: {{ .Values.auth.authentication.oauth2.issuerUrl }}
  PULSAR_PREFIX_oauthAudience: {{ .Values.auth.authentication.oauth2.audience }}
  PULSAR_PREFIX_oauthSubjectClaim: {{ .Values.auth.authentication.oauth2.subjectClaim }}
  PULSAR_PREFIX_oauthAdminScope: {{ .Values.auth.authentication.oauth2.adminScope }}
  authenticationProviders:  {{ .Values.auth.authentication.oauth2.authenticationProviders }}
  brokerClientAuthenticationParameters: '{"privateKey":"file:///pulsar/oauth2/auth.json","issuerUrl":"{{ .Values.auth.authentication.oauth2.issuerUrlParam }}","audience":"{{ .Values.auth.authentication.oauth2.audienceParam }}","scope":"{{ .Values.auth.authentication.oauth2.adminScopeParam }}"}'
  brokerClientAuthenticationPlugin: org.apache.pulsar.client.impl.auth.oauth2.AuthenticationOAuth2
  {{- end }}
  {{- end }}
  {{- if .Values.functions.useDedicatedRunner}}
  functionWorkerWebServiceURL: {{ template "pulsar.proxy.function.service.url" . }}
  {{- if .Values.tls.functions.enabled}}
  functionWorkerWebServiceURLTLS: {{ template "pulsar.proxy.function.service.url.tls" . }}
  {{- end }}
  {{- end }}
{{ toYaml .Values.proxy.configData | indent 2 }}
  # Include log configuration file, If you want to configure the log level and other configuration
  # items, you can modify the configmap, and eventually it will overwrite the log4j2.yaml file under conf
{{ if .Values.proxy.log4jConfig }}
  log4j2.yaml: {{ toYaml .Values.proxy.log4jConfig | indent 2 }}
{{- else -}}
{{ (.Files.Glob "conf/proxy/log4j2.yaml").AsConfig | indent 2 }}
{{- end -}}
{{- end }}
