#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

{{- if .Values.initialize }}
{{- if .Values.components.bookkeeper }}
apiVersion: batch/v1
kind: Job
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.bookkeeper.component }}-init"
  namespace: {{ template "pulsar.namespace" . }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
    component: "{{ .Values.bookkeeper.component }}-init"
spec:
  template:
    spec:
      initContainers:
      - name: wait-zookeeper-ready
        image: "{{ .Values.images.bookie.repository }}:{{ .Values.images.bookie.tag }}"
        imagePullPolicy: {{ .Values.images.bookie.pullPolicy }}
        command: ["sh", "-c"]
        args:
          - >-
            {{- if $zk:=.Values.pulsar_metadata.userProvidedZookeepers }}
            until bin/pulsar zookeeper-shell -server {{ $zk }} ls {{ or .Values.metadataPrefix "/" }}; do
              echo "user provided zookeepers {{ $zk }} are unreachable... check in 3 seconds ..." && sleep 3;
            done;
            {{ else }}
            until nslookup {{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}-{{ add (.Values.zookeeper.replicaCount | int) -1 }}.{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }}.{{ template "pulsar.namespace" . }}; do
              sleep 3;
            done;
            {{- end}}
        {{- if .Values.zookeeper.customTools.restore.enable }}
      - name: pulsar-metadata-cleanup
        image: "{{ .Values.zookeeper.customTools.restore.repository }}:{{ .Values.zookeeper.customTools.restore.tag }}"
        imagePullPolicy: "{{ .Values.zookeeper.customTools.restore.pullPolicy }}"
        command: ["sh", "-c"]
        args:
          - >
            {{- include "pulsar.toolset.zookeeper.tls.settings" . | nindent 12 }}
            {{ if and .Values.tls.enabled .Values.tls.zookeeper.enabled }}
            export "$(cat conf/pulsar_env.sh | xargs)";
            export "OPTS=${PULSAR_EXTRA_OPTS}";
            env;
            {{- end }}
            bin/pulsar-metadata-tool cleanup
        env:
          - name: METADATA_TOOL_CONF
            value: "/pulsar-metadata-tool/conf/pulsar-metadata-tool/pulsar-metadata-tool.properties"
        volumeMounts:
          - name: cleanup-config
            mountPath: /pulsar-metadata-tool/conf/pulsar-metadata-tool
      {{- include "pulsar.toolset.certs.volumeMounts" . | nindent 10 }}
      {{- end }}
      containers:
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.bookkeeper.component }}-init"
        image: "{{ .Values.images.bookie.repository }}:{{ .Values.images.bookie.tag }}"
        imagePullPolicy: {{ .Values.images.bookie.pullPolicy }}
      {{- if .Values.bookkeeper.metadata.resources }}
        resources:
{{ toYaml .Values.bookkeeper.metadata.resources | indent 10 }}
      {{- end }}
        command: ["sh", "-c"]
        args:
          - >
            bin/apply-config-from-env.py conf/bookkeeper.conf;
            {{- include "pulsar.toolset.zookeeper.tls.settings" . | nindent 12 }}
            if bin/bookkeeper shell whatisinstanceid; then
                echo "bookkeeper cluster already initialized";
            else
                {{- if not (eq .Values.metadataPrefix "") }}
                bin/bookkeeper org.apache.zookeeper.ZooKeeperMain -server {{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }} create {{ .Values.metadataPrefix }} 'created for pulsar cluster "{{ template "pulsar.fullname" . }}"' || yes &&
                {{- end }}
                bin/bookkeeper shell initnewcluster;
            fi
        envFrom:
        - configMapRef:
            name: "{{ template "pulsar.fullname" . }}-{{ .Values.bookkeeper.component }}"
        volumeMounts:
        {{- include "pulsar.toolset.certs.volumeMounts" . | nindent 8 }}
      volumes:
      {{- include "pulsar.toolset.certs.volumes" . | nindent 6 }}
      {{- if .Values.zookeeper.customTools.restore.enable }}
      - name: cleanup-config
        configMap:
          name: "{{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.customTools.restore.component }}"
      {{- end }}
      restartPolicy: Never
{{- end }}
{{- end }}
