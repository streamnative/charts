#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

{{- if .Values.components.broker }}
{{- $ensembleSize := .Values.broker.configData.managedLedgerDefaultEnsembleSize }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}"
  namespace: {{ .Values.namespace }}
  labels:
    {{- include "pulsar.standardLabels" . | nindent 4 }}
    component: {{ .Values.broker.component }}
spec:
  serviceName: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}"
  replicas: {{ .Values.broker.replicaCount }}
  selector:
    matchLabels:
      {{- include "pulsar.matchLabels" . | nindent 6 }}
      component: {{ .Values.broker.component }}
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        {{- include "pulsar.template.labels" . | nindent 8 }}
        component: {{ .Values.broker.component }}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.broker.ports.http }}"
{{- with .Values.broker.annotations }}
{{ toYaml . | indent 8 }}
{{- end }}
    spec:
    {{- if .Values.broker.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.broker.nodeSelector | indent 8 }}
    {{- end }}
    {{- if .Values.broker.tolerations }}
      tolerations:
{{ toYaml .Values.broker.tolerations | indent 8 }}
    {{- end }}
      affinity:
        {{- if and .Values.affinity.anti_affinity .Values.broker.affinity.anti_affinity}}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: "app"
                operator: In
                values:
                - "{{ template "pulsar.name" . }}-{{ .Values.broker.component }}"
              - key: "release"
                operator: In
                values:
                - {{ .Release.Name }}
              - key: "component"
                operator: In
                values:
                - {{ .Values.broker.component }}
            topologyKey: "kubernetes.io/hostname"
        {{- end }}
      terminationGracePeriodSeconds: {{ .Values.broker.gracePeriod }}
      initContainers:
      # This init container will wait for zookeeper to be ready before
      # deploying the bookies
      - name: wait-zookeeper-ready
        image: "{{ .Values.images.pulsar.repository }}:{{ .Values.images.pulsar.tag }}"
        imagePullPolicy: {{ .Values.images.pulsar.pullPolicy }}
        command: ["sh", "-c"]
        args:
          - >-
            {{- if .Values.pulsar_metadata.configurationStore }}
            until bin/bookkeeper org.apache.zookeeper.ZooKeeperMain -server {{ .Values.pulsar_metadata.configurationStore}} ls {{ .Values.configurationStoreMetadataPrefix }}/admin/clusters/{{ template "pulsar.fullname" . }}; do
            {{- end }}
            {{- if not .Values.pulsar_metadata.configurationStore }}
            until bin/bookkeeper org.apache.zookeeper.ZooKeeperMain -server {{ template "pulsar.fullname" . }}-{{ .Values.zookeeper.component }} ls {{ .Values.metadataPrefix }}/admin/clusters/{{ template "pulsar.fullname" . }}; do
            {{- end }}
              echo "pulsar cluster {{ template "pulsar.fullname" . }} isn't initialized yet ... check in 3 seconds ..." && sleep 3;
            done;
      # This init container will wait for bookkeeper to be ready before
      # deploying the broker
      - name: wait-bookkeeper-ready
        image: "{{ .Values.images.pulsar.repository }}:{{ .Values.images.pulsar.tag }}"
        imagePullPolicy: {{ .Values.images.pulsar.pullPolicy }}
        command: ["sh", "-c"]
        args:
          - >
            bin/apply-config-from-env.py conf/bookkeeper.conf &&
            until bin/bookkeeper shell whatisinstanceid; do
              sleep 3;
            done &&
            until bin/bookkeeper shell simpletest -ensemble {{$ensembleSize}}; do
              sleep 3;
            done
        envFrom:
          - configMapRef:
              name: "{{ template "pulsar.fullname" . }}-{{ .Values.toolset.component }}"
      containers:
      - name: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}"
        image: "{{ .Values.images.pulsar.repository }}:{{ .Values.images.pulsar.tag }}"
        imagePullPolicy: {{ .Values.images.pulsar.pullPolicy }}
      {{- if .Values.broker.resources }}
        resources:
{{ toYaml .Values.broker.resources | indent 10 }}
      {{- end }}
        command: ["sh", "-c"]
        args:
        - >
          bin/apply-config-from-env.py conf/broker.conf &&
          bin/apply-config-from-env.py conf/pulsar_env.sh &&
          bin/gen-yml-from-env.py conf/functions_worker.yml &&
          bin/pulsar broker
        ports:
        # prometheus needs to access /metrics endpoint
        - name: http
          containerPort: {{ .Values.broker.ports.http }}
        {{- if or (not .Values.tls.enabled) (not .Values.tls.broker.enabled) }}
        - name: pulsar
          containerPort: {{ .Values.broker.ports.pulsar }}
        {{- end }}
        {{- if and .Values.tls.enabled .Values.tls.broker.enabled }}
        - name: https
          containerPort: {{ .Values.broker.ports.https }}
        - name: pulsarssl
          containerPort: {{ .Values.broker.ports.pulsarssl }}
        {{- end }}
        envFrom:
        - configMapRef:
            name: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}"
        env:
          - name: superUserRoles
            valueFrom:
              secretKeyRef:
                name: "{{ template "pulsar.fullname" . }}-admin-secret"
                key: USER
      {{- if or .Values.broker.auth.authentication.enable (and .Values.tls.enabled .Values.tls.broker.enabled) }}
        volumeMounts:
          {{- if .Values.broker.auth.authentication.enable }}
          - mountPath: "/pulsar/keys"
            name: token-keys
            readOnly: true
          {{- end}}
          {{- if .Values.tls.broker.enabled }}
          - mountPath: "/pulsar/certs"
            name: broker-certs
            readOnly: true
          {{- end}}
      {{- end}}
      {{- if or .Values.broker.auth.authentication.enable (and .Values.tls.enabled .Values.tls.broker.enabled) }}
      volumes:
        {{- if .Values.broker.auth.authentication.enable }}
        - name: token-keys
          secret:
            secretName: "{{ template "pulsar.fullname" . }}-{{ .Values.broker.component }}-secrets"
            items:
              {{- if .Values.broker.auth.authentication.usingSecretKey }}
              - key: SECRETKEY
                path: token/secret.key
              {{- else }}
              - key: PUBLICKEY
                path:/token/public.key
              {{- end}}
              - key: TOKEN
                path: token/token
        {{- end}}
        {{- if .Values.tls.broker.enabled }}
        - name: broker-certs
          secret:
            secretName: "{{ template "pulsar.fullname" . }}-{{ .Values.tls.broker.cert_name }}"
            items:
              - key: tls.crt
                path: broker/tls.crt
              - key: tls.key
                path: broker/tls.key
              - key: ca.crt
                path: broker/ca.crt
        {{- end}}
      {{- end}}
{{- end }}